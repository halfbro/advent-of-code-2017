
==================== FINAL INTERFACE ====================
2017-12-03 21:50:50.118151508 UTC

interface main@main:Main 8002
  interface hash: a1d0b63c663d29572c03274fd4a19dad
  ABI hash: 857ce382288914adc4e23e9be1c00f4f
  export-list hash: bfc1507da90f4c7e8f2a71a385525a73
  orphan hash: cdf08028d3591156432650463fe3f156
  flag hash: 039e84090a497d45658fa5cf7b4600e8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.readData
module dependencies:
package dependencies: base-4.9.1.0*
                      day2-0.1.0.0@day2-0.1.0.0-9iR2D5yT77uH1MSGDm9uv2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  day2-0.1.0.0@day2-0.1.0.0-9iR2D5yT77uH1MSGDm9uv2:Lib 4db8730ab288c7a7c3a55e4bd711fae9
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
e123bf80354957d791e664c34bc582ac
  $s$fShow[]_$s$fShow[]_$cshow ::
    [[GHC.Types.Int]] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[GHC.Types.Int]]) ->
                 GHC.Show.$fShow[]_$s$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4ab426697bf4b05965c962cd6b793230
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
87ee4e2f6d770931f9810dd75ef86a66
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.List.$w!! @ GHC.Base.String ipv1 0#)
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   input :: [[GHC.Types.Int]]
                   = GHC.Base.map
                       @ [GHC.Types.Char]
                       @ [GHC.Types.Int]
                       Main.main2
                       (Data.OldList.lines ipv5)
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Main.$s$fShow[]_$s$fShow[]_$cshow input)
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case Lib.$wgo1 input 0# of ww { DEFAULT ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, GHC.Tuple.() #) } } } } }) -}
16b2720bd0589d71358658c14667865e
  main2 :: GHC.Base.String -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 Data.OldList.wordsFB
                   @ [GHC.Types.Int]
                   Main.main3
                   (GHC.Types.[] @ GHC.Types.Int)
                   x) -}
ffcea45806ce2bc7bab5aba205037495
  main3 :: [GHC.Types.Char] -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   (ys :: [GHC.Types.Int])[OneShot] ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   (case Text.Read.readEither6
                           @ GHC.Types.Int
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Int
                              Main.main6
                              x) of wild {
                      [] -> Main.main5
                      : x1 ds
                      -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Main.main4 } })
                   ys) -}
2f36c646821e3517047298cbab184af1
  main4 :: GHC.Types.Int
  {- Strictness: x -}
56abe478d215a60a145ff3973b80dc91
  main5 :: GHC.Types.Int
  {- Strictness: x -}
2f2dcc5c485600fe7d5ee33e80de1bb9
  main6 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
a902134cec8041b655179cdf98024be0
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
2f7efcf31eeadbf251b367f918cb4dd1
  readData :: GHC.Base.String -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 GHC.Base.build
                   @ [GHC.Types.Int]
                   (\ @ b1
                      (c :: [GHC.Types.Int] -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ [GHC.Types.Int]
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Main.main2)
                      n
                      (Data.OldList.lines x))) -}
"SPEC/Main $fShow[]_$cshow @ [Int]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 [GHC.Types.Int])
  GHC.Show.$fShow[]_$cshow @ [GHC.Types.Int] $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshow
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

