
==================== FINAL INTERFACE ====================
2017-12-03 20:46:39.283695491 UTC

interface day1-0.1.0.0-LKLId9gWgcN8O7u7p6ZsBZ:Lib 8002
  interface hash: 972e264fd1ad9459b42f6a9a46402f6f
  ABI hash: df7d6ac5ec75deb81e82a2713afeea11
  export-list hash: 3da3005862fa1c179740ff66f65aa52c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.solveCaptcha
  Lib.solveCaptcha2
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
ceba126c978b6958e478029eb7013840
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
4b26213d2abf7c2e236bc945cc5a17ba
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
462e985dc627999fdb9dbda549303134
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "day1-0.1.0.0-LKLId9gWgcN8O7u7p6ZsBZ"#) -}
dcfac0a70f44aa73c01228bab341de3e
  $wgo ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0] -}
f9321cd9cb3a0b0bd38d922de114a326
  $wgo1 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0] -}
0267408ce1ca14e2117faeaf191e963f
  $wsolveCaptcha :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 Lib.$wgo
                   w
                   (case w of wild {
                      [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Int] of {}
                      : ds1 xs
                      -> GHC.Base.++
                           @ GHC.Types.Int
                           xs
                           (GHC.Types.: @ GHC.Types.Int ds1 (GHC.Types.[] @ GHC.Types.Int)) })
                   0#) -}
e84858100b6a590ab14ad05385894190
  $wsolveCaptcha2 :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 Lib.$wgo1
                   w
                   (case GHC.List.$wlenAcc @ GHC.Types.Int w 0# of ww2 { DEFAULT ->
                    case GHC.Classes.divInt# ww2 2# of ww4 { DEFAULT ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# ww4 0#) of wild {
                      GHC.Types.False
                      -> case w of wild1 {
                           [] -> case GHC.List.cycle1 ret_ty [GHC.Types.Int] of {}
                           : ipv ipv1
                           -> letrec {
                                xs' :: [GHC.Types.Int] = GHC.Base.++ @ GHC.Types.Int wild1 xs'
                              } in
                              GHC.List.zipWith
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                (GHC.Base.const @ GHC.Types.Int @ GHC.Types.Int)
                                (Lib.$wunsafeDrop @ GHC.Types.Int ww4 xs')
                                wild1 }
                      GHC.Types.True
                      -> case w of wild1 {
                           [] -> case GHC.List.cycle1 ret_ty [GHC.Types.Int] of {}
                           : ipv ipv1
                           -> letrec {
                                xs' :: [GHC.Types.Int] = GHC.Base.++ @ GHC.Types.Int wild1 xs'
                              } in
                              GHC.List.zipWith
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                (GHC.Base.const @ GHC.Types.Int @ GHC.Types.Int)
                                xs'
                                wild1 } } } })
                   0#) -}
ee9dfa42d46d914338f9b4c33a2c1027
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
274c3961c04f52eaf090e87dedc7ed1d
  solveCaptcha :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Lib.$wsolveCaptcha w of ww { DEFAULT -> GHC.Types.I# ww }) -}
4eab73ccea1fe81bedd966c5c262d13b
  solveCaptcha2 :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Lib.$wsolveCaptcha2 w of ww { DEFAULT -> GHC.Types.I# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

